<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />


	<beans:bean id="templateResolver"
		class="org.thymeleaf.templateresolver.ServletContextTemplateResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".html" />
		<beans:property name="templateMode" value="HTML5" />
		<!-- Template cache is set to false (default is true). -->
		<beans:property name="cacheable" value="false" />
	</beans:bean>

	<beans:bean id="templateEngine" class="org.thymeleaf.spring3.SpringTemplateEngine">
		<beans:property name="templateResolver" ref="templateResolver" />
	</beans:bean>
	<beans:bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<beans:property name="basename" value="Messages" />
	</beans:bean>
	<beans:bean
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">

		<beans:property name="viewResolvers">
			<beans:list>
				<!-- Used here for 'xml' and 'atom' views -->
				<beans:bean
					class="org.springframework.web.servlet.view.BeanNameViewResolver">
					<beans:property name="order" value="1" />
				</beans:bean>
				<!-- Used for Thymeleaf views -->
				<beans:bean class="org.thymeleaf.spring3.view.ThymeleafViewResolver">
					<beans:property name="templateEngine" ref="templateEngine" />
					<beans:property name="order" value="2" />
				</beans:bean>
			</beans:list>
		</beans:property>
	</beans:bean>

	<beans:bean
		class="org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping"></beans:bean>

	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="1000000000" />
	</beans:bean>
	
	
<beans:bean id="initMap" class="edu.csus.csc191.common.Utilities" init-method="initColumnsHashMap">
   
 </beans:bean>
   <!--<beans:bean id="commonModelAttributes" class="edu.csus.csc191.common.CommonModelAttributes" init-method="setCommonAttributes" auto-wired="byName">-->
        <!--</beans:bean>-->

        <!--This registers an interceptor (i.e. filter) that modifies any
          controller's view and model before Spring continues on doing what it
          does. Basically, if takes control of the model and view that a
          controller method returns and lets you process stuff before Spring
          continues doing what it normally does.-->
        <interceptors>
            <!--<interceptor>-->
                <!--<mapping path="/joe/**" />-->
                <beans:bean class="edu.csus.csc191.common.CustomLayoutInterceptor" /> 
            <!--</interceptor>-->
       </interceptors>


	<context:annotation-config />

	<context:component-scan base-package="edu.csus.csc191" />



</beans:beans>
